name: Check Broken Links
env:
  GH_TOKEN: ${{ github.token }}
  test_mode: true
  create_issues: true
  max_test_issues: 5

on:
  schedule:
    - cron: '50 14 * * 0'
  workflow_dispatch:
    inputs:
      testMode:
        type: boolean
        description: Test mode?
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false
      howManyIssues:
        type: number
        description: Max issues in test mode
        default: 1

jobs:
  check-links:
    name: Check for Broken Links
    runs-on: ubuntu-latest
    outputs:
      broken_links: ${{ steps.process_output.outputs.broken_links }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check run mode
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "test_mode=${{ github.event.inputs.testMode }}" >> $GITHUB_ENV
          echo "create_issues=${{ github.event.inputs.createIssues }}" >> $GITHUB_ENV
          echo "max_test_issues=${{ github.event.inputs.howManyIssues }}" >> $GITHUB_ENV

      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-broken-links
          restore-keys: cache-lychee-

      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --quiet --no-progress --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          format: json
          fail: false

      - name: Process Lychee Output
        id: process_output
        run: |
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '.error_map | to_entries | map({file: .key, url: .value[].url, status: .value[].status}) | group_by(.url) | map({url: .[0].url, status: .[0].status, files: (map(.file) | unique)}) | .[]' lychee_report.json | jq -s . > reformatted_broken_links.json
          else
            echo "No broken links found."
            echo "[]" > reformatted_broken_links.json
          fi
          if [ -s reformatted_broken_links.json ] && [ "$(jq 'length' reformatted_broken_links.json)" -gt 0 ]; then
              echo "broken_links=true" >> $GITHUB_ENV
              echo "broken_links=true" >> $GITHUB_OUTPUT
          else
              echo "broken_links=false" >> $GITHUB_ENV
              echo "broken_links=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload broken links
        uses: actions/upload-artifact@v4
        with:
          name: broken-links
          path: reformatted_broken_links.json
          retention-days: 1

      - name: Archive raw output
        uses: actions/upload-artifact@v4
        if: ${{ env.test_mode == 'true' }}
        with:
          name: raw-output
          path: |
            lychee_report.json
            reformatted_broken_links.json
          if-no-files-found: warn
          retention-days: 1

      - name: Save lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
          
  create-issues:
    name: Create Issues for Broken Links
    runs-on: ubuntu-latest
    needs: check-links
    if: ${{ needs.check-links.outputs.broken_links == 'true' }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set parameters
        run: |
          echo "test_mode=${{ github.event.inputs.testMode }}" >> $GITHUB_ENV
          echo "max_test_issues=${{ github.event.inputs.howManyIssues }}" >> $GITHUB_ENV
        
      - name: Reticulating splines of JSON
        uses: actions/download-artifact@v4
        with:
          name: broken-links
          path: broken-links-artifact

      - name: Debug JSON Content
        run: |
          ls -R broken-links-artifact
          cat broken-links-artifact/reformatted_broken_links.json || echo "File not found!"

      - name: Check JSON is valid
        run: |
          if [[ ! -s broken-links-artifact/reformatted_broken_links.json ]]; then
            echo "Error: broken-links-artifact/reformatted_broken_links.json is empty!"
            exit 1
          fi

          if ! jq empty broken-links-artifact/reformatted_broken_links.json 2>/dev/null; then
            echo "Invalid JSON format!"
            exit 1
          fi

      - name: Debug JSON Before Issue Creation
        if: ${{ env.test_mode == 'true' }}
        run: |
          ls -l broken-links-artifact
          cat broken-links-artifact/reformatted_broken_links.json

      - name: Create Issues for Each Broken Link
        run: |
          issue_count=0
          while read -r line; do
            url=$(echo "$line" | jq -r '.url')
            status_code=$(echo "$line" | jq -r '.status.code // "Unknown"')
            status_text=$(echo "$line" | jq -r '.status.text // "Unknown"')
            affected_files=$(echo "$line" | jq -r '.files | unique')
          
            if [[ -z "$url" || "$url" == "null" ]]; then
              echo "Skipping invalid entry: $line"
              continue
            fi
          
            issue_title="Broken Link: $url"
            safe_title=$(echo "$issue_title" | jq -sRr @uri)
            echo "Checking for existing issue with title: $safe_title"
            existing_issue=$(gh issue list --state open --label "broken-link" --json number,title | jq -r --arg title "$safe_title" '
              .[] | select(.title | test($title; "i")) | .number' | head -n 1
            )
              
            labels="broken-link,non-developer"
            if echo "$affected_files" | grep -q "lib/views/help/"; then
              labels="broken-link,non-developer,help-pages"
            fi
              
            # Format affected files as a Markdown list with links
            file_list=""
            while read -r file; do
              file_path=$(echo "$file" | xargs)  # Trim spaces
              file_link="[ðŸ“„ $file_path](https://github.com/${{github.repository}}/blob/master/$file_path)"
              file_list+="- $file_link"$'\n'
            done <<< "$(echo "$affected_files" | jq -r '.[]')"
            # Write issue description
            {
              echo "**Broken Link:** [$url]($url)"
              echo ""
              echo "**Status Code:** $status_code ($status_text)"
              echo ""
              echo "**Affected Files:**"
              echo "$file_list"
            } > issue.md
              
            if [[ -n "$existing_issue" ]]; then
              echo "Existing issue found for $broken_link: #$existing_issue"
              gh issue comment "$existing_issue" --body "$(cat <<EOF
              ðŸ”„ **Update:** Broken link still exists.
              
              **Status Code:** $status_code ($status_text)
              
              **Affected Files:**
              $file_list
              EOF
              )" || echo "Warning: Failed to comment on issue #$existing_issue"
              exit 0;
            else
              echo "Creating new issue for $url"
              gh issue create --title "$issue_title" --body-file issue.md --label "$labels" || echo "Warning: Failed to create issue."
              ((issue_count++))
            fi
            
          
            if [[ "$test_mode" == "true" && "$issue_count" -ge "$max_test_issues" ]]; then
              echo "Test mode active. Stopping after $issue_count issue(s)."
              exit 0;
            fi
          done < <(jq -c '.[]' broken-links-artifact/reformatted_broken_links.json)
