name: Check Broken Links
env:
  test_mode: false
  create_issues: true
  broken_links: false

on:
  schedule:
    - cron: '0 3 * * 1'  # Runs every Monday at 03:00 UTC
  workflow_dispatch:  # Allows manual triggering
    inputs:
      testMode:
        type: boolean
        description: Test mode? (does not create issues)
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false

jobs:
  check-links:
    name: Check for Broken Links
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore lychee cache
      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      # Run Lychee to Check Links
      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --quiet --no-progress --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          format: json
          fail: false  # Ensure the workflow continues even if broken links are found

      # Archive raw output
      - name: Archive raw output
        uses: actions/upload-artifact@v4
        if: (github.event_name == 'workflow_dispatch' && env.test_mode == true)
        with:
          name: raw-output
          path: lychee_report.json

      # Process Lychee Output
      - name: Process Lychee Output
        run: |
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '.error_map | to_entries | map({file: .key, url: .value[].url, status: .value[].status}) | group_by(.url) | map({url: .[0].url, status: .[0].status, files: (map(.file) | unique)})' lychee_report.json | jq -s . > reformatted_broken_links.json
          else
            echo "No broken links found or lychee_report.json is empty."
          fi

          # Validate reformatted_broken_links.json
          if ! jq empty reformatted_broken_links.json 2>/dev/null; then
            echo "Invalid JSON in reformatted_broken_links.json. Please check the content." >&2
            exit 1
          fi

          # Set broken_links to true if the JSON file contains broken links
          if [ -s reformatted_broken_links.json ]; then
            echo "broken_links=true" >> $GITHUB_ENV
          else
            echo "broken_links=false" >> $GITHUB_ENV
          fi

      # Create Issues for Each Unique Broken Link (if not already open)
      - name: Create Issues for Each Unique Broken Link (if not already open)
        if: (env.test_mode == false && env.create_issues == true && env.broken_links == 'true') || (env.test_mode == true && env.create_issues == true && env.broken_links == 'true')
        run: |
          # Read the reformatted_broken_links.json and create issues for each broken link
          jq -c '.[]' reformatted_broken_links.json | while read -r link; do
            url=$(echo "$link" | jq -r '.url')
            status=$(echo "$link" | jq -r '.status.text')
            error_code=$(echo "$link" | jq -r '.status.code')
            files=$(echo "$link" | jq -r '.files | join(", ")')

            echo "Processing $url with status $status and affected files: $files"

            # Check if an issue already exists for this broken link
            existing_issue=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=broken%20link" | \
            jq -r '.[] | select(.title | contains("'"$url"'")) | .title')

            if [[ ! -z "$existing_issue" ]]; then
              echo "Issue already exists for $url. Skipping..."
              continue
            fi

            # Create a new issue if no existing issue found
            labels="broken link"
            if echo "$files" | grep -q "lib/views/help/"; then
              labels="broken link, non-developer, help-pages"
            else
              labels="broken link, non-developer"
            fi

            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues \
                 -d '{
               "title": "Broken Link: '"$url"'",
               "body": "The following `.erb` files contain a broken link to **'"$url"'**:\n\n'"$files"'\n\nError: '"$error_code"' '"$status"'",
               "labels": ['"$labels"']
                 }'

            # Exit after one issue creation if in test mode
            if [ "$env.test_mode" == "true" ]; then
              break
            fi
          done
