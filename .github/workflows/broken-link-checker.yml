name: Check Broken Links
env:
  test_mode: false
  max_test_issues: 1
  create_issues: true
  broken_links: false
  GH_TOKEN: ${{ github.token }}

on:
  schedule:
    - cron: "0 3 * * 1"
  workflow_dispatch:
    inputs:
      testMode:
        type: boolean
        description: Test mode?
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false
      howManyIssues:
        type: number
        description: Max issues in test mode
        default: 1

jobs:
  check-links:
    name: Check for Broken Links
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check run mode
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          test_mode_val="${{ github.event.inputs.testMode }}"
          create_issues_val="${{ github.event.inputs.createIssues }}"

          if [[ "$test_mode_val" == "true" ]]; then
            echo "test_mode=true" >> $GITHUB_ENV
          else
            echo "test_mode=false" >> $GITHUB_ENV
          fi

          if [[ "$create_issues_val" == "true" ]]; then
            echo "create_issues=true" >> $GITHUB_ENV
          else
            echo "create_issues=false" >> $GITHUB_ENV
          fi

          echo "max_test_issues=${{ github.event.inputs.howManyIssues }}" >> $GITHUB_ENV

      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-
          
      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --quiet --no-progress --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          format: json
          fail: false

      - name: Process Lychee Output
        run: |
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '.error_map | to_entries | map({file: .key, url: .value[].url, status: .value[].status}) | group_by(.url) | map({url: .[0].url, status: .[0].status, files: (map(.file) | unique)}) | .[]' lychee_report.json | jq -s . > reformatted_broken_links.json
          else
            echo "No broken links found."
            echo "[]" > reformatted_broken_links.json
          fi

          if [ -s reformatted_broken_links.json ] && [ "$(jq 'length' reformatted_broken_links.json)" -gt 0 ]; then
            echo "broken_links=true" >> $GITHUB_ENV
            echo "broken_links=true" >> $GITHUB_OUTPUT
          else
            echo "broken_links=false" >> $GITHUB_ENV
            echo "broken_links=false" >> $GITHUB_OUTPUT
          fi

      - name: Archive raw output
        uses: actions/upload-artifact@v4
        if: ${{ env.test_mode == 'true' }}
        with:
          name: raw-output
          path: |
            lychee_report.json
            reformatted_broken_links.json
          if-no-files-found: warn

      - name: Save lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  create-issues:
    name: Create Issues for Broken Links
    runs-on: ubuntu-latest
    needs: check-links
    if: ${{ needs.check-links.outputs.broken_links == 'true' }}
    steps:
      - name: Create Issues for Each Broken Link
        run: |
          issue_count=0
          
          if [[ ! -s reformatted_broken_links.json ]]; then
            echo "Error: reformatted_broken_links.json is empty!"
            exit 1
          fi

          if ! jq empty reformatted_broken_links.json 2>/dev/null; then
            echo "Invalid JSON format!"
            exit 1
          fi
              
          while read -r line; do
            url=$(echo "$line" | jq -r '.url')
            status_code=$(echo "$line" | jq -r '.status.code // "Unknown"')
            status_text=$(echo "$line" | jq -r '.status.text // "Unknown"')
            affected_files=$(echo "$line" | jq -r '.files | join(", ")')

            if [[ -z "$url" || "$url" == "null" ]]; then
              echo "Skipping invalid entry: $line"
              continue
            fi

            issue_title="Broken Link: $url"
            existing_issue=$(gh issue list --state open --label "broken link" --json number,title \
              | jq -r --arg title "$issue_title" '.[] | select(.title == $title) | .number')

            labels="broken link, non-developer"
            if echo "$affected_files" | grep -q "lib/views/help/"; then
              labels="broken link, non-developer, help-pages"
            fi

            echo "**Broken Link:** [$url]($url)" > issue.md
            echo "" >> issue.md
            echo "**Status Code:** $status_code ($status_text)" >> issue.md
            echo "**Affected Files:** $affected_files" >> issue.md

            if [[ -n "$existing_issue" ]]; then
              gh issue comment "$existing_issue" --body "ðŸ”„ **Update:** Broken link still exists. Affected files:\n\n$affected_files"
            else
              gh issue create \
                --title "$issue_title" \
                --body-file issue.md \
                --label "$labels"
            fi

            ((issue_count++))

            if [[ "$test_mode" == "true" && "$issue_count" -ge "${{ env.max_test_issues }}" ]]; then
              echo "Test mode active. Stopping after $issue_count issue(s)."
              break
            fi
          done < <(jq -c '.[]' reformatted_broken_links.json)
