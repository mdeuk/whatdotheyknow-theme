name: Check Broken Links in help pages
env:
  GH_TOKEN: ${{ github.token }}
  test_mode: false
  create_issues: true
  max_test_issues: 5

on:
  schedule:
    - cron: "30 21 * * MON"
  workflow_dispatch:
    inputs:
      testMode:
        type: boolean
        description: Test mode?
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false
      howManyIssues:
        type: number
        description: Max issues in test mode
        default: 1

jobs:
  check-links:
    name: Check for Broken Links in ERB files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install xmlstarlet, and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet python3-pip
          pip3 install rapidfuzz lxml jq

      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-broken-links
          restore-keys: cache-lychee-

      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --quiet --no-progress --user-agent '${{github.repository}} (lychee)' --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          format: json
          fail: false

      - name: Process Lychee Output
        id: process_output
        run: |
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '
              . as $root
              | [ $root.error_map
                  | to_entries[]
                  | { file: .key, error: .value[] }
                ]
              | group_by(.error.url)
              | map({
                  url: .[0].error.url,
                  status: .[0].error.status,
                  files: (map(.file) | unique)
                })
              | flatten
            ' lychee_report.json > reformatted_broken_links.json
          else
            echo "[]" > reformatted_broken_links.json
          fi

          if [ "$(jq 'length' reformatted_broken_links.json)" -gt 0 ]; then
              echo "broken_links=true" >> $GITHUB_ENV
              echo "broken_links=true" >> $GITHUB_OUTPUT
          else
              echo "broken_links=false" >> $GITHUB_ENV
              echo "broken_links=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Archive Suggestions
        run: |
          python3 - <<EOF
          import json

          with open("reformatted_broken_links.json") as f:
              broken_links = json.load(f)

          for link in broken_links:
              broken_url = link.get("url", "")
              if not broken_url:
                  continue

              suggestions = []
              
              if "ico.org.uk" in broken_url:
                  suggestions.append(f"[ICO Sitemap](https://ico.org.uk/sitemap.xml)")

              if ".scot" in broken_url:
                  suggestions.append(f"[NRS Scotland Archive](https://webarchive.nrscotland.gov.uk/*/{broken_url})")

              # National Archive rules
              if any(domain in broken_url for domain in ["ico.org.uk", "gov.uk", "gov.wales", "llyw.cymru"]):
                  suggestions.append(f"[UK National Archives](https://webarchive.nationalarchives.gov.uk/ukgwa/+/{broken_url})")

              # Wayback Machine (Default)
              suggestions.append(f"[Wayback Machine](https://web.archive.org/web/*/{broken_url})")

              link["suggestions"] = suggestions

          with open("reformatted_broken_links.json", "w") as f:
              json.dump(broken_links, f, indent=2)

          print("Archive suggestions added.")
          EOF

      - name: Upload broken links
        uses: actions/upload-artifact@v4
        with:
          name: broken-links
          path: |
            reformatted_broken_links.json
            lychee_report.json
          retention-days: 1

  create-issues:
    name: Create Issues for Broken Links
    runs-on: ubuntu-latest
    needs: check-links
    if: ${{ needs.check-links.outputs.broken_links == 'true' && needs.check-links.outputs.create_issues == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download broken links artifact
        uses: actions/download-artifact@v4
        with:
          name: broken-links
          path: broken-links-artifact

      - name: Validate JSON File
        run: |
          if [[ ! -s broken-links-artifact/reformatted_broken_links.json ]]; then
            echo "Error: JSON file is empty!"
            exit 1
          fi
          jq empty broken-links-artifact/reformatted_broken_links.json

      - name: Create Issues
        run: |
          issue_count=0
          while read -r line; do
            [[ -z "$line" || "$line" == "null" ]] && continue

            url=$(echo "$line" | jq -r '.url // empty')
            status_code=$(echo "$line" | jq -r '.status.code // "Unknown"')
            affected_files=$(echo "$line" | jq -r '.files | unique')

            [[ -z "$url" ]] && continue

            issue_title="Broken Link: $url"

            labels="broken-link,non-developer"
            [[ "$affected_files" == *"lib/views/help/"* ]] && labels+=",help-pages"

            file_list=$(jq -r ".files | map(\"- [ðŸ“„ \(. | gsub(\" \"; \"%20\"))](https://github.com/${{github.repository}}/blob/master/\(.))\") | join(\"\n\")" <<< "$line")

            {
              echo "**Broken Link:** [$url]($url)"
              echo "**Status Code:** \`$status_code\`"
              echo "## Affected Files"
              echo "$file_list"
            } > issue.md

            suggestion_list=$(jq -r '.suggestions | map("- \(.))") | join("\n")' <<< "$line")

            if [[ -n "$suggestion_list" ]]; then
              {
                echo "### Suggestions"
                echo "The following are possible archive links:"
                echo "$suggestion_list"
              } >> issue.md
            fi

            gh issue create --title "$issue_title" --body-file issue.md --label "$labels" || continue

            ((issue_count++))
            if [[ "$test_mode" == "true" && "$issue_count" -ge "$max_test_issues" ]]; then
              echo "Test mode: stopping after $issue_count issues."
              break
            fi

          done < <(jq -c '.[]' broken-links-artifact/reformatted_broken_links.json)

