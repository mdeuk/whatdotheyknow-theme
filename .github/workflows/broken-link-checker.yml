name: Check Broken Links
env:
  GH_TOKEN: ${{ github.token }}
  test_mode: true
  create_issues: true
  max_test_issues: 5

on:
  schedule:
    - cron: '25 16 * * SUN'
  workflow_dispatch:
    inputs:
      testMode:
        type: boolean
        description: Test mode?
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false
      howManyIssues:
        type: number
        description: Max issues in test mode
        default: 1

jobs:
  check-links:
    name: Check for Broken Links
    runs-on: ubuntu-latest
    outputs:
      broken_links: ${{ steps.process_output.outputs.broken_links }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check run mode
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "test_mode=${{ github.event.inputs.testMode || 'true' }}" >> $GITHUB_ENV
          echo "create_issues=${{ github.event.inputs.createIssues || 'false' }}" >> $GITHUB_ENV
          echo "max_test_issues=${{ github.event.inputs.howManyIssues || 5 }}" >> $GITHUB_ENV

      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-broken-links
          restore-keys: cache-lychee-

      - name: Delete existing lychee cache
        run: |
          gh cache delete cache-lychee-broken-links || echo "Cache may not exist, continuing..."
        continue-on-error: true

      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --quiet --no-progress --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          format: json
          fail: false

      - name: Process Lychee Output
        id: process_output
        run: |
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '.error_map | to_entries | map({file: .key, url: .value[].url, status: .value[].status}) | group_by(.url) | map({url: .[0].url, status: .[0].status, files: (map(.file) | unique)}) | .[]' lychee_report.json | jq -s . > reformatted_broken_links.json
          else
            echo "[]" > reformatted_broken_links.json
          fi

          if [ "$(jq 'length' reformatted_broken_links.json)" -gt 0 ]; then
              echo "broken_links=true" >> $GITHUB_ENV
              echo "broken_links=true" >> $GITHUB_OUTPUT
          else
              echo "broken_links=false" >> $GITHUB_ENV
              echo "broken_links=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload broken links
        uses: actions/upload-artifact@v4
        with:
          name: broken-links
          path: reformatted_broken_links.json
          retention-days: 1

      - name: Save updated lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: cache-lychee-broken-links

  create-issues:
    name: Create Issues for Broken Links
    runs-on: ubuntu-latest
    needs: check-links
    if: ${{ needs.check-links.outputs.broken_links == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download broken links artifact
        uses: actions/download-artifact@v4
        with:
          name: broken-links
          path: broken-links-artifact

      - name: Validate JSON File
        run: |
          if [[ ! -s broken-links-artifact/reformatted_broken_links.json ]]; then
            echo "Error: broken-links-artifact/reformatted_broken_links.json is empty!"
            exit 1
          fi
          if ! jq empty broken-links-artifact/reformatted_broken_links.json 2>/dev/null; then
            echo "Invalid JSON format!"
            exit 1
          fi

      - name: Create Issues for Each Broken Link
        run: |
          issue_count=0
          while read -r line; do
            url=$(echo "$line" | jq -r '.url')
            url_safe=$(echo "$url" | sed 's/#/%23/g') # Encode URL fragments
            status_code=$(echo "$line" | jq -r '.status.code // "Unknown"')
            status_text=$(echo "$line" | jq -r '.status.text // "Unknown"')
            affected_files=$(echo "$line" | jq -r '.files | unique')

            [[ -z "$url" || "$url" == "null" ]] && continue

            issue_title="Broken Link: $url"
            existing_issue=$(gh issue list --state open --label "broken-link" --json number,title | jq -r --arg title "$safe_title" '
              .[] | select(.title | test($title; "i")) | .number' | head -n 1
            )
            
            labels="broken-link,non-developer"
            [[ "$affected_files" == *"lib/views/help/"* ]] && labels+=",help-pages"

            file_list=$(jq -r '.files | map("- [ðŸ“„ \(. | @uri)](https://github.com/${{github.repository}}/blob/master/\(.)") | join("\n")' <<< "$line")

            {
              echo "**Broken Link:** [$url_safe]($url_safe)"
              echo ""
              echo "**Status Code:** $status_code ($status_text)"
              echo ""
              echo "**Affected Files:**"
              echo "$file_list"
            } > issue.md

            if [[ -n "$existing_issue" ]]; then
              {
                echo "ðŸ”„ **Update:** Broken link still exists. ðŸ˜©"
                echo ""
                echo "**Status Code:** $status_code ($status_text)"
                echo ""
                echo "**Affected Files:**"
                echo "$file_list"
              } > comment.md

              gh issue comment "$existing_issue" --body-file comment.md || echo "Warning: Failed to comment on issue #$existing_issue"
            else
              gh issue create --title "$issue_title" --body-file issue.md --label "$labels" || echo "Warning: Failed to create issue."
            fi

            ((issue_count++))
            [[ "$test_mode" == "true" && "$issue_count" -ge "$max_test_issues" ]] && exit 0

          done < <(jq -c '.[]' broken-links-artifact/reformatted_broken_links.json)
