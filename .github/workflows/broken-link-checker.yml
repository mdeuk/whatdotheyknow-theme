name: Check Broken Links
env:
  test_mode: false
  create_issues: true
  broken_links: false

on:
  schedule:
    - cron: '0 3 * * 1'  # Runs every Monday at 03:00 UTC
  workflow_dispatch:  # Allows manual triggering
    inputs:
      testMode:
        type: boolean
        description: Test mode? (does not create issues)
        default: true
      createIssues:
        type: boolean
        description: Create issues for broken links?
        default: false

jobs:
  check-links:
    name: Check for Broken Links
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check run mode
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "test_mode=${{ github.event.inputs.testMode }}" >> $GITHUB_ENV
          echo "create_issues=${{ github.event.inputs.createIssues }}" >> $GITHUB_ENV

      - name: Restore lychee cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      - name: Run Lychee to Check Links
        id: lychee
        uses: lycheeverse/lychee-action@v2.2.0
        with:
          args: "--cache --max-cache-age 1d --cache-exclude-status '429, 500..502' --format json --no-progress --exclude whatdotheyknow.com $(find lib/views -name '*.erb')"
          output: lychee_report.json
          fail: false  # Ensure the workflow continues even if broken links are found

      - name: Process Lychee Output
        run: |
          cat lychee_report.json
          if [ -s lychee_report.json ] && [ "$(jq -r '.error_map' lychee_report.json)" != "{}" ]; then
            jq -r '.error_map | to_entries[] | .key as $file | .value[] | "\($file) \(.url) - \(.status.code // "N/A") \(.status.text)"' lychee_report.json | sort | uniq > broken_links.txt
          else
            echo "No broken links found or lychee_report.json is empty."
          fi

          if [ -s broken_links.txt ]; then
            echo "broken_links=true" >> $GITHUB_ENV
          else
            echo "broken_links=false" >> $GITHUB_ENV
          fi

      - name: Save lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      - name: Print Results (Manual Run)
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Broken Links Report ==="
          if [ -s broken_links.txt ]; then
            cat broken_links.txt
          else
            echo "No broken links found!"
          fi

      - name: Create Issues for Each Unique Broken Link (if not already open)
        if: (env.test_mode == false && env.create_issues == true && env.broken_links == 'true') || (env.test_mode == true && env.create_issues == true && env.broken_links == 'true')
        run: |
          while read -r line; do
            file=$(echo "$line" | awk '{print $1}')
            broken_link=$(echo "$line" | awk '{print $2}')
            error_code=$(echo "$line" | awk '{print $4}')
            error_text=$(echo "$line" | awk '{print $5}')
            echo "Processing $broken_link in $file with error $error_code $error_text"
            
            existing_issue=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=broken%20link" | \
            jq -r '.[] | select(.title | contains("'"$broken_link"'")) | .title')
  
            if [[ ! -z "$existing_issue" ]]; then
              echo "Issue already exists for $broken_link. Skipping..."
              continue
            fi
            affected_files=$(grep -l "$broken_link" $(find lib/views -name '*.erb') | tr '\n' ',' | sed 's/,$//')
            if echo "$affected_files" | grep -q "lib/views/help/"; then
              labels="broken link, non-developer, help-pages"
            else
              labels="broken link, non-developer"
            fi
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues \
                 -d '{
               "title": "Broken Link: '"$broken_link"'",
               "body": "The following `.erb` files contain a broken link to **'"$broken_link"'**:\n\n'"$affected_files"'\n\nError: '"$error_code"' '"$error_text"'",
               "labels": ['"$labels"']
                 }'
            if [ "$env.test_mode" == "true" ]; then
              break
            fi
          done < broken_links.txt
